import {
	BadRequestException,
	Injectable,
	InternalServerErrorException,
	NotFoundException
} from '@nestjs/common'
import { ItemStatus } from '@prisma/__generated__'

import { PrismaService } from '@/prisma/prisma.service'
import { TelegramService } from '@/telegram/telegram.service'

import { CreateUserItemDto } from './dto/createUserItem.dto'
import { WithdrawItemsDto } from './dto/withdrawItems'

@Injectable()
export class ItemService {
	public constructor(
		private readonly prismaService: PrismaService,
		private readonly telegramService: TelegramService
	) {}

	public async getAllItems() {
		return await this.prismaService.item.findMany()
	}

	public async getAllPurchasedItems(userId: string) {
		return await this.prismaService.userItem.findMany({
			where: {
				userId: userId
			},
			include: {
				item: true
			}
		})
	}

	public async buyItem(dto: CreateUserItemDto) {
		const item = await this.prismaService.item.findUnique({
			where: {
				id: dto.itemId
			}
		})

		const user = await this.prismaService.user.findUnique({
			where: {
				id: dto.userId
			}
		})

		if (!item || !user) {
			throw new NotFoundException('user or item not found')
		}

		const priceToUse = item.sale > 0 ? item.sale : item.price
		const totalPrice = priceToUse * dto.quantity

		if (user.balance < totalPrice) {
			throw new BadRequestException('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.')
		}

		const result = await this.prismaService.$transaction([
			this.prismaService.user.update({
				where: {
					id: dto.userId
				},
				data: {
					balance: { decrement: totalPrice }
				}
			}),

			this.prismaService.userItem.create({
				data: {
					userId: dto.userId,
					itemId: dto.itemId,
					quantity: dto.quantity,
					amount: dto.amount
				}
			})
		])

		await this.telegramService.sendMessage(
			`üõí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.displayName} –∫—É–ø–∏–ª –ø—Ä–µ–¥–º–µ—Ç: <b>${item.name}</b> (${dto.quantity} —à—Ç.) –Ω–∞ —Å—É–º–º—É ${totalPrice}‚ÇΩ`,
			false,
			item.game
		)

		return result
	}

	public async withdrawItem(dto: WithdrawItemsDto) {
		const user = await this.prismaService.user.findUnique({
			where: {
				id: dto.userId
			}
		})

		if (!user) {
			throw new NotFoundException('user not found')
		}

		const result = this.prismaService.$transaction(async prisma => {
			const order = await prisma.order.create({
				data: {
					userId: dto.userId,
					isIssued: false
				},
				include: {
					items: true
				}
			})

			const userItem = await prisma.userItem.updateMany({
				where: {
					userId: dto.userId,
					status: ItemStatus.PURCHASED,
					orderId: null
				},
				data: {
					status: ItemStatus.WITHDRAWN,
					orderId: order.id
				}
			})

			return { userItem, order }
		})
		return result
	}

	public async getAllRecentWithdrawnItems(userId: string) {
		const user = await this.prismaService.user.findUnique({
			where: {
				id: userId
			}
		})

		if (!user) {
			throw new NotFoundException('user not found')
		}

		return await this.prismaService.userItem.findMany({
			where: {
				userId: userId,
				status: ItemStatus.WITHDRAWN,
				updatedAt: {
					gte: new Date(Date.now() - 10000)
				}
			},
			include: {
				item: true
			}
		})
	}

	public async confirmIssuance(userId: string, type: string) {
		if (!userId) {
			throw new BadRequestException('User ID is required')
		}

		try {
			const result = await this.prismaService.userItem.updateMany({
				where: {
					userId,
					status: ItemStatus.WITHDRAWN,
					isIssued: false
				},

				data: {
					isIssued: true
				}
			})

			const user = await this.prismaService.user.findUnique({
				where: {
					id: userId
				}
			})

			if (result.count === 0) {
				this.telegramService.sendMessage(
					`‚ö†Ô∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –≤—ã–¥–∞—á–∏</b> ‚ö†Ô∏è\n\n` +
						`‚ñ™Ô∏è <b>–°—Ç–∞—Ç—É—Å:</b> –í—Å–µ —Ç–æ–≤–∞—Ä—ã —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç\n` +
						`‚ñ™Ô∏è <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b>\n` +
						`   üë§ <i>–ò–º—è:</i> ${user.displayName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
						`   üÜî <i>ID:</i> ${userId}\n` +
						`‚ñ™Ô∏è <b>–ò–≥—Ä–∞:</b> ${type}\n`,
					false,
					type
				)

				return '<h2>‚ÑπÔ∏è –í—Å–µ —Ç–æ–≤–∞—Ä—ã —É–∂–µ –±—ã–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã —Ä–∞–Ω–µ–µ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–ª—è –≤—ã–¥–∞—á–∏.</h2>'
			}

			await this.telegramService.sendMessage(
				`üéâ <b>–£—Å–ø–µ—à–Ω–∞—è –≤—ã–¥–∞—á–∞ —Ç–æ–≤–∞—Ä–æ–≤</b> üéâ\n\n` +
					`‚ñ™Ô∏è <b>–°—Ç–∞—Ç—É—Å:</b> –í—Å–µ —Ç–æ–≤–∞—Ä—ã —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç\n` +
					`‚ñ™Ô∏è <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b>\n` +
					`   üë§ <i>–ò–º—è:</i> ${user.displayName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
					`   üÜî <i>ID:</i> ${userId}\n` +
					`‚ñ™Ô∏è <b>–ò–≥—Ä–∞:</b> ${type}\n` +
					`‚úÖ <b>–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ</b>`,
				false,
				type
			)

			return '<h2>‚úÖ –í—ã–≤–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!</h2>'
		} catch (error) {
			console.error(error)

			throw new InternalServerErrorException(
				'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –≤—ã–≤–æ–¥–∞'
			)
		}
	}
}
